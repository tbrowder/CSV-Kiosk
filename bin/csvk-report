#!/usr/bin/env raku
use CSV::Kiosk::Report :ALL;

@@
-# (remove any existing MAIN definitions)
+sub USAGE() {
+    note "Usage:\n"
+      ~ "  bin/csvk-report sort --csv=<file> [--by=<hdr>] [--sep=<c>]\n"
+      ~ "  bin/csvk-report --csv=<file> sort [--by=<hdr>] [--sep=<c>]\n"
+      ~ "  bin/csvk-report pdf  --csv=<file> --out=<pdf> "
+      ~ "[--title=<s>] [--sep=<c>]\n"
+      ~ "  bin/csvk-report --csv=<file> --out=<pdf> "
+      ~ "[--title=<s>] [--sep=<c>] pdf";
+}
+
+# One flexible entry point: positional first, then named.
+# This avoids the 'required parameter after named' issue.
+sub MAIN(*@pos, *%opt) {
+    # subcommand can appear at start or end; default to 'sort'
+    my $cmd = @pos.first({ $_ eq 'sort' || $_ eq 'pdf' }) // 'sort';
+
+    my $csv   = %opt<csv>   // (USAGE; exit 2);
+    my $sep   = %opt<sep>   // ',';
+    my $by    = %opt<by>    // 'name';
+    my $out   = %opt<out>;
+    my $title = %opt<title> // 'CSV List';
+
+    given $cmd {
+        when 'sort' {
+            CSV::Kiosk::Report::sort-csv($csv, :$by, :$sep);
+            exit 0;
+        }
+        when 'pdf' {
+            $out // (note "--out is required for pdf"; USAGE; exit 2);
+            CSV::Kiosk::Report::generate-pdf($csv, $out, :$title, :$sep);
+            exit 0;
+        }
+        default {
+            USAGE; exit 2;
+        }
+    }
+}

